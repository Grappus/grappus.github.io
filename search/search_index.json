{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#home","text":"For full documentation visit mkdocs.org .","title":"Home"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"android/","text":"Android Guidelines Setting up new project Setting up a new project takes up a lot effort and forgetting up some edge cases which may lead to some fatal errors which can lead to some serious issues to be handled later. We have done this job for you. Follow along to see the process. Clone our base project from here . Change the required package name. While working with multiple modules few things to keep in mind with the modules package name. For example take com.android as the base package name: (i) Package name of app module should be com.android . (ii) Package name of api module should be com.android.api . (iii) Package name of core module should be com.android.core . (iv) Package name of logic module should be com.android.logic . Naming the packages in this format helps in running test cases with Jacoco . Change the api response structure according to your needs [link here] and ammend it's test class accrrdingly. Format the code by running ./gradlew spotlessApply command and run tests by running ./gradlew testDebugUnitTestCoverage . Delete the .git folder in your project's root directory. Connect your local repo to remote source. if all the above points run successfully then you are ready to roll. Setting up remote repository If not already done Create a new project in Bitbucket. Create a new repository in the newly created project. Create a new branch named develop . Navigate to Settings -> Workflow -> Branch permissions . (i) Create a branch permission for develop and master . (ii) Give branch access to specific people. (iii)Uncheck the Allow rewriting branch history and Allow deleting this branch checkbox. Connect your local repo to remote source. develop should always be latest stable branch where all development PR's would be sent to. master stable branch and should only be used for client and production releases. Creating a PR template PR template helps us to remind of some things which are essential things for the project's sanity to be maintained. While working with the team it is essential that we all follow some basic rules and provide useful information to the reviewer. If you are an admin of the repository Go to settings. Under the PULL REQUESTS heading, click Default description and paste the following content . ## Description ### Why was this change necessary? [text here] ### How does it address the problem? [text here] ### Are there any side effects? [text here] ### Do you want any specific feedback? [text here] ### Do you have resources that will help the reviewer? [MP-](https://messengerpro.atlassian.net/browse/MP-) ### Zeplin screen design links? [link here] ### Did you run `./gradlew spotlessApply; ./gradlew testDebugUnitTestCoverage;` locally? [yes/no] Change the JIRA tickts prefix according to you and click save. Creating Git Aliases Aliases are used to create shorter commands that map to longer commands. Here are a few handy git aliases you can make to avoid copy and pasting a command again and again. pr check alias here Another alias here. Before you start developing Set up File template in Intellij We have made a Android studio template to create files required for a fragment. Download the File template from here and follow the instructions written in Readme.txt . Navigate to Android Studio and go to File-> Import Settings... and select the settings.zip inside the newly downloaded file template. After completing the above processes restart Androids studio and you should see file template link here . While Developing Few things to remember while developing so that we all can be on the same page. Nomenclature : Typacilly each fragment contains 5 Files. * Fragment : The part where UI events are handled. * FragmentBindingModel : The part where UI events processing is done and formatted details are sent to the fragment. * FragmentViewModel : Here the events are processed. It contains all the required data to mantain the state of the fragment. * FragmentHandler : It is a interface where we declare the click listeners of UI events. * FragmentLayout : It contains the UI design code. Naming convention of all files should be as described above just replace the above word Fragment with your desired name. Write the test cases of logic module religiously. Write comments where ever you are performing some ad-hoc logic calculation. Do not use random numbers in that method, give them a proper variable name. Use Intention-Revealing Names The following is an excerpt from Clean Code: A Handbook of Agile Software Craftsmanship (Robert C. Martin). It is easy to say that names should reveal intent. What we want to impress upon you is that we are serious about this. Choosing good names takes time but saves more than it takes. So take care with your names and change them when you find better ones. Everyone who reads your code (including you) will be happier if you do. The name of a variable, function, or class, should answer all the big questions. It should tell you why it exists, what it does, and how it is used. If a name requires a com- ment, then the name does not reveal its intent. int d; // elapsed time in days If a name needs a comment to describe itself then it is not a good name. The name d reveals nothing. It does not evoke a sense of elapsed time, nor of days. We should choose a name that specifies what is being measured and the unit of that measurement: int elapsedTimeInDays; int daysSinceCreation; int daysSinceModification; int fileAgeInDays; Raising a PR Few important things to remember while raising your PR to be merged so that we all can benifit from it and it's important to follow some standard conventions while creating pull requests: Before creating a pull request It is imperative before creating a new Pull Request to rebase : Make sure that the branch that you are actually using on your local machine is the branch you want to rebase. To do so you can switch it with a GUI tool or in the terminal: $ git checkout my-branch Then run the rebase command to rebase your branch base on the develop branch (our default branch): $ git rebase origin develop If merge conflicts occur resolve them and then: $ git rebase --continue Push the rebase: $ git push -f Your PR should be small. Make sure that the branch that you are actually using on your local machine is the branch you want to rebase. To do so you can switch it with a GUI tool or in the terminal: $ git rebase origin/develop . If you have implemented anythingnew, please mention the relevent links to it. If you have made changes only in a single module, squash all your commits into 1 commit. If you have made changes in more than 1 module, please divide your PR into 3 commits i.e data, logic and UI. Following is an example commit message where each commit contains it's relevent files. feat(ALT-33) : Adds sign in via OTP screen (data). feat(ALT-33) : Adds sign in via OTP screen (logic). feat(ALT-33) : Adds sign in via OTP screen (UI). Fill the description form and hit the Create PR button. Android heroes: Meet our awesome Android team","title":"Android"},{"location":"android/#android-guidelines","text":"","title":"Android Guidelines"},{"location":"android/#setting-up-new-project","text":"Setting up a new project takes up a lot effort and forgetting up some edge cases which may lead to some fatal errors which can lead to some serious issues to be handled later. We have done this job for you. Follow along to see the process. Clone our base project from here . Change the required package name. While working with multiple modules few things to keep in mind with the modules package name. For example take com.android as the base package name: (i) Package name of app module should be com.android . (ii) Package name of api module should be com.android.api . (iii) Package name of core module should be com.android.core . (iv) Package name of logic module should be com.android.logic . Naming the packages in this format helps in running test cases with Jacoco . Change the api response structure according to your needs [link here] and ammend it's test class accrrdingly. Format the code by running ./gradlew spotlessApply command and run tests by running ./gradlew testDebugUnitTestCoverage . Delete the .git folder in your project's root directory. Connect your local repo to remote source. if all the above points run successfully then you are ready to roll.","title":"Setting up new project"},{"location":"android/#setting-up-remote-repository","text":"If not already done Create a new project in Bitbucket. Create a new repository in the newly created project. Create a new branch named develop . Navigate to Settings -> Workflow -> Branch permissions . (i) Create a branch permission for develop and master . (ii) Give branch access to specific people. (iii)Uncheck the Allow rewriting branch history and Allow deleting this branch checkbox. Connect your local repo to remote source. develop should always be latest stable branch where all development PR's would be sent to. master stable branch and should only be used for client and production releases.","title":"Setting up remote repository"},{"location":"android/#creating-a-pr-template","text":"PR template helps us to remind of some things which are essential things for the project's sanity to be maintained. While working with the team it is essential that we all follow some basic rules and provide useful information to the reviewer. If you are an admin of the repository Go to settings. Under the PULL REQUESTS heading, click Default description and paste the following content . ## Description ### Why was this change necessary? [text here] ### How does it address the problem? [text here] ### Are there any side effects? [text here] ### Do you want any specific feedback? [text here] ### Do you have resources that will help the reviewer? [MP-](https://messengerpro.atlassian.net/browse/MP-) ### Zeplin screen design links? [link here] ### Did you run `./gradlew spotlessApply; ./gradlew testDebugUnitTestCoverage;` locally? [yes/no] Change the JIRA tickts prefix according to you and click save.","title":"Creating a PR template"},{"location":"android/#creating-git-aliases","text":"Aliases are used to create shorter commands that map to longer commands. Here are a few handy git aliases you can make to avoid copy and pasting a command again and again. pr check alias here Another alias here.","title":"Creating Git Aliases"},{"location":"android/#before-you-start-developing","text":"","title":"Before you start developing"},{"location":"android/#set-up-file-template-in-intellij","text":"We have made a Android studio template to create files required for a fragment. Download the File template from here and follow the instructions written in Readme.txt . Navigate to Android Studio and go to File-> Import Settings... and select the settings.zip inside the newly downloaded file template. After completing the above processes restart Androids studio and you should see file template link here .","title":"Set up File template in Intellij"},{"location":"android/#while-developing","text":"Few things to remember while developing so that we all can be on the same page. Nomenclature : Typacilly each fragment contains 5 Files. * Fragment : The part where UI events are handled. * FragmentBindingModel : The part where UI events processing is done and formatted details are sent to the fragment. * FragmentViewModel : Here the events are processed. It contains all the required data to mantain the state of the fragment. * FragmentHandler : It is a interface where we declare the click listeners of UI events. * FragmentLayout : It contains the UI design code. Naming convention of all files should be as described above just replace the above word Fragment with your desired name. Write the test cases of logic module religiously. Write comments where ever you are performing some ad-hoc logic calculation. Do not use random numbers in that method, give them a proper variable name.","title":"While Developing"},{"location":"android/#use-intention-revealing-names","text":"The following is an excerpt from Clean Code: A Handbook of Agile Software Craftsmanship (Robert C. Martin). It is easy to say that names should reveal intent. What we want to impress upon you is that we are serious about this. Choosing good names takes time but saves more than it takes. So take care with your names and change them when you find better ones. Everyone who reads your code (including you) will be happier if you do. The name of a variable, function, or class, should answer all the big questions. It should tell you why it exists, what it does, and how it is used. If a name requires a com- ment, then the name does not reveal its intent. int d; // elapsed time in days If a name needs a comment to describe itself then it is not a good name. The name d reveals nothing. It does not evoke a sense of elapsed time, nor of days. We should choose a name that specifies what is being measured and the unit of that measurement: int elapsedTimeInDays; int daysSinceCreation; int daysSinceModification; int fileAgeInDays;","title":"Use Intention-Revealing Names"},{"location":"android/#raising-a-pr","text":"Few important things to remember while raising your PR to be merged so that we all can benifit from it and it's important to follow some standard conventions while creating pull requests:","title":"Raising a PR"},{"location":"android/#before-creating-a-pull-request","text":"It is imperative before creating a new Pull Request to rebase : Make sure that the branch that you are actually using on your local machine is the branch you want to rebase. To do so you can switch it with a GUI tool or in the terminal: $ git checkout my-branch Then run the rebase command to rebase your branch base on the develop branch (our default branch): $ git rebase origin develop If merge conflicts occur resolve them and then: $ git rebase --continue Push the rebase: $ git push -f Your PR should be small. Make sure that the branch that you are actually using on your local machine is the branch you want to rebase. To do so you can switch it with a GUI tool or in the terminal: $ git rebase origin/develop . If you have implemented anythingnew, please mention the relevent links to it. If you have made changes only in a single module, squash all your commits into 1 commit. If you have made changes in more than 1 module, please divide your PR into 3 commits i.e data, logic and UI. Following is an example commit message where each commit contains it's relevent files. feat(ALT-33) : Adds sign in via OTP screen (data). feat(ALT-33) : Adds sign in via OTP screen (logic). feat(ALT-33) : Adds sign in via OTP screen (UI). Fill the description form and hit the Create PR button.","title":"Before creating a pull request"},{"location":"android/#android-heroes","text":"Meet our awesome Android team","title":"Android heroes:"},{"location":"git/","text":"Git We use git to help us manage changes to source code over time. Follow along to get some insights about our workflow. We are assuming that you are famaliar with git to a fair extent. Cloning a repo Before cloning a repo make sure you have correct access rights. Connecting your web repository to project management tool. As of now we use Bitbucket for web-based version control repository hosting service and Jira as our project management tool. Please contact your project manager to set up workflows which will help in automating issue/ticket tracking process. Jira Linking Generally all of your issues are mentioned in the project management tool. This helps in keeping record of the productive time you spend working for the company. Branch Naming Git branches are effectively a pointer to a snapshot of your changes. When you want to add a new feature or fix a bug\u2014no matter how big or how small\u2014you spawn a new branch to encapsulate your changes. If you have not created a new branch till yet go ahead and create one. Most of time time branched should be created by your issue/ticket number in Jira. Your jira project prefix -Dash- Issue number Here are a few examples of how the branch should be named. Ideally, you should work with one ticket at a time, submit it's PR and pick another one but if the issue is too small or it takes little time to fix, you can pick multiple tickts at a time. Below are some sample branch names. Working with a single ticket at a time ALT-223 QQ-54 INFLCR-223 Working with multiple tickts at a time ALT-223-ALT-224-ALT-305 QQ-54-QQ-125-QQ-87 INFLCR-223-INFLCR-25 However if you happen to work on an issue which is not on Jira yet convey to your project manager to put that on jira and in the meanwhile you can create a branch like chores-AddErrorHandler fix-SplashAnimationFix feat-AddContinueButtonInWishlistScreen If before raising your PR the ticket is created, rename your branch using git branch -m new-name Commit message format We follow a strict specific commit format so that each and every commit messege is well formatted and self explanatory. It helps the reviewer or teammate to quickly understand the intenson of the commit and provide feedback accordingly. Below are some sample commit message, their structure and explanation of them. feat(ALT-653) : Add continue button to navigate to next page fix(INL-345) : Fix Splash screen animation bug chores(*) : Add progaurd rules, base project set up This commit messgae is divided into 3 sections: feat(*) , fix(*), chores(*) : These represents the type of feature or fix your commit will do. feat(*) : This essentially represents that your commit will add a feature. fix(*) : This represents that your commit will fix a bug. chores(*) : This represents that your commit is doing some project structure related work.doc docs() : Documentation only changes. test() : Add missing tests. ALT-653 : This is the ticket number you are working on. If there is no ticket assigned you can replace it with a asterisk * . Commit Description : This is a short yet meaningful description of your commit. Below are few points to keep in mind for a descriptive commit message. {W.I.P} Reviewing a PR Having proper communication on internet for the benefit of the project is one of the most important aspect of project. Following practices collected from Github's blog and other sources should be followed. Ask, don\u2019t tell. (\u201cWhat do you think about trying\u2026?\u201d rather than \u201cDon\u2019t do\u2026\u201d). If you disagree strongly, consider giving it a few minutes before responding; think before you react. Explain your reasons why code should be changed. (Not in line with the style guide? A personal preference?) Offer ways to simplify or improve code. Avoid using derogatory terms, like \u201cstupid\u201d, when referring to the work someone has produced. Be humble. (\u201cI\u2019m not sure, let\u2019s try\u2026\u201d). Avoid hyperbole. (\u201cNEVER do\u2026\u201d). Aim to develop professional skills, group knowledge and product quality, through group critique. Be aware of negative bias with online communication. (If content is neutral, we assume the tone is negative.) Can you use positive language as opposed to neutral?. Use emoji to clarify tone. Compare \u201c:sparkles: :sparkles: Looks good :+1: :sparkles: :sparkles:\u201d to \u201cLooks good.\u201d Responding to feedback on Pull Requests Don't take it personally. The review is of the code, not you. Be grateful for the reviewer's suggestions. (\"Good call. I'll make that change.\") Try to respond to every comment. Consider leading with an expression of appreciation, especially when feedback has been mixed. Best Practices Rebase is preferred to merge as it keeps the tree compact. Rebase your working branch before you start working and before you create a pull request. Always push your commits at the end of day, so in case of emergency, other team members can pick-up where you left.","title":"Git"},{"location":"git/#git","text":"We use git to help us manage changes to source code over time. Follow along to get some insights about our workflow. We are assuming that you are famaliar with git to a fair extent.","title":"Git"},{"location":"git/#cloning-a-repo","text":"Before cloning a repo make sure you have correct access rights.","title":"Cloning a repo"},{"location":"git/#connecting-your-web-repository-to-project-management-tool","text":"As of now we use Bitbucket for web-based version control repository hosting service and Jira as our project management tool. Please contact your project manager to set up workflows which will help in automating issue/ticket tracking process.","title":"Connecting your web repository to project management tool."},{"location":"git/#jira-linking","text":"Generally all of your issues are mentioned in the project management tool. This helps in keeping record of the productive time you spend working for the company.","title":"Jira Linking"},{"location":"git/#branch-naming","text":"Git branches are effectively a pointer to a snapshot of your changes. When you want to add a new feature or fix a bug\u2014no matter how big or how small\u2014you spawn a new branch to encapsulate your changes. If you have not created a new branch till yet go ahead and create one. Most of time time branched should be created by your issue/ticket number in Jira. Your jira project prefix -Dash- Issue number","title":"Branch Naming"},{"location":"git/#here-are-a-few-examples-of-how-the-branch-should-be-named","text":"Ideally, you should work with one ticket at a time, submit it's PR and pick another one but if the issue is too small or it takes little time to fix, you can pick multiple tickts at a time. Below are some sample branch names.","title":"Here are a few examples of how the branch should be named."},{"location":"git/#working-with-a-single-ticket-at-a-time","text":"ALT-223 QQ-54 INFLCR-223","title":"Working with a single ticket at a time"},{"location":"git/#working-with-multiple-tickts-at-a-time","text":"ALT-223-ALT-224-ALT-305 QQ-54-QQ-125-QQ-87 INFLCR-223-INFLCR-25 However if you happen to work on an issue which is not on Jira yet convey to your project manager to put that on jira and in the meanwhile you can create a branch like chores-AddErrorHandler fix-SplashAnimationFix feat-AddContinueButtonInWishlistScreen If before raising your PR the ticket is created, rename your branch using git branch -m new-name","title":"Working with multiple tickts at a time"},{"location":"git/#commit-message-format","text":"We follow a strict specific commit format so that each and every commit messege is well formatted and self explanatory. It helps the reviewer or teammate to quickly understand the intenson of the commit and provide feedback accordingly. Below are some sample commit message, their structure and explanation of them. feat(ALT-653) : Add continue button to navigate to next page fix(INL-345) : Fix Splash screen animation bug chores(*) : Add progaurd rules, base project set up This commit messgae is divided into 3 sections: feat(*) , fix(*), chores(*) : These represents the type of feature or fix your commit will do. feat(*) : This essentially represents that your commit will add a feature. fix(*) : This represents that your commit will fix a bug. chores(*) : This represents that your commit is doing some project structure related work.doc docs() : Documentation only changes. test() : Add missing tests. ALT-653 : This is the ticket number you are working on. If there is no ticket assigned you can replace it with a asterisk * . Commit Description : This is a short yet meaningful description of your commit. Below are few points to keep in mind for a descriptive commit message. {W.I.P}","title":"Commit message format"},{"location":"git/#reviewing-a-pr","text":"Having proper communication on internet for the benefit of the project is one of the most important aspect of project. Following practices collected from Github's blog and other sources should be followed. Ask, don\u2019t tell. (\u201cWhat do you think about trying\u2026?\u201d rather than \u201cDon\u2019t do\u2026\u201d). If you disagree strongly, consider giving it a few minutes before responding; think before you react. Explain your reasons why code should be changed. (Not in line with the style guide? A personal preference?) Offer ways to simplify or improve code. Avoid using derogatory terms, like \u201cstupid\u201d, when referring to the work someone has produced. Be humble. (\u201cI\u2019m not sure, let\u2019s try\u2026\u201d). Avoid hyperbole. (\u201cNEVER do\u2026\u201d). Aim to develop professional skills, group knowledge and product quality, through group critique. Be aware of negative bias with online communication. (If content is neutral, we assume the tone is negative.) Can you use positive language as opposed to neutral?. Use emoji to clarify tone. Compare \u201c:sparkles: :sparkles: Looks good :+1: :sparkles: :sparkles:\u201d to \u201cLooks good.\u201d","title":"Reviewing a PR"},{"location":"git/#responding-to-feedback-on-pull-requests","text":"Don't take it personally. The review is of the code, not you. Be grateful for the reviewer's suggestions. (\"Good call. I'll make that change.\") Try to respond to every comment. Consider leading with an expression of appreciation, especially when feedback has been mixed.","title":"Responding to feedback on Pull Requests"},{"location":"git/#best-practices","text":"Rebase is preferred to merge as it keeps the tree compact. Rebase your working branch before you start working and before you create a pull request. Always push your commits at the end of day, so in case of emergency, other team members can pick-up where you left.","title":"Best Practices"}]}